// 맨 마지막 부터 위로 올라가는 바텀업 방식이 더욱 수월함
// 삼각형의 가장 마지막 배열을 잘라내 dp배열로 지정
// 나머지 삼각형 배열을 바닥에서 부터 올라오는 반복문을 실행
// 현재 삼각형의 라인에 하위요소는 dp배열임
// ex) dp = [4, 5, 2, 6, 5], 현재 삼각형 라인 = [2, 7, 4, 4]
// 현재 삼각형 라인의 하위 경로(아래, 대각선)의 크기를 비교해 더 높은 수를 현재 삼각형 라인의 상위요소와 더해 dp 위치에 업데이트 해줌
// ex) 2의 하위 요소 =  4(아래), 5(대각선)
// ex) 5가 더 크니 2 + 5 = 7을 dp의 위치에 업데이트 = [7, 5, 2, 6, 5]
// 이걸 쭉 반복해서 꼭대기 까지 도달하면 꼭대기의 값이 가장 큰 수이므로 그 수를 반환하면 끝
function solution(triangle) {
    const DP = triangle.pop()
    for(let i = triangle.length - 1; i >= 0; i--){
        for(let j = 0; j < triangle[i].length; j++){
            DP[j] = Math.max(DP[j], DP[j + 1]) + triangle[i][j]
        }
    }
    return DP[0]
}

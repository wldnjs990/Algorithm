import sys;
input = sys.stdin.readline
# 컨베이어 벨트 위의 로봇

# 길이가 N인 컨베이어 벨트가 있고, 길이가 2N인 벨트가 이 컨베이어 벨트를 위아래로 감싸며 돌고 있다.
# 벨트는 길이 1 간격으로 2N개의 칸으로 나뉘어져 있으며, 각 칸에는 아래 그림과 같이 1부터 2N까지의 번호가 매겨져 있다.

# 벨트가 한 칸 회전하면 1번부터 2N-1번까지의 칸은 다음 번호의 칸이 있는 위치로 이동하고, 2N번 칸은 1번 칸의 위치로 이동한다.
# i번 칸의 내구도는 Ai이다. 위의 그림에서 1번 칸이 있는 위치를 "올리는 위치", N번 칸이 있는 위치를 "내리는 위치"라고 한다.

# 컨베이어 벨트에 박스 모양 로봇을 하나씩 올리려고 한다. 로봇은 올리는 위치에만 올릴 수 있다.
# 언제든지 로봇이 내리는 위치에 도달하면 그 즉시 내린다. 로봇은 컨베이어 벨트 위에서 스스로 이동할 수 있다.
# 로봇을 올리는 위치에 올리거나 로봇이 어떤 칸으로 이동하면 그 칸의 내구도는 즉시 1만큼 감소한다.

# 컨베이어 벨트를 이용해 로봇들을 건너편으로 옮기려고 한다. 로봇을 옮기는 과정에서는 아래와 같은 일이 순서대로 일어난다.

# 벨트가 각 칸 위에 있는 로봇과 함께 한 칸 회전한다.
# 가장 먼저 벨트에 올라간 로봇부터, 벨트가 회전하는 방향으로 한 칸 이동할 수 있다면 이동한다.
# 만약 이동할 수 없다면 가만히 있는다.
# 로봇이 이동하기 위해서는 이동하려는 칸에 로봇이 없으며, 그 칸의 내구도가 1 이상 남아 있어야 한다.
# 올리는 위치에 있는 칸의 내구도가 0이 아니면 올리는 위치에 로봇을 올린다.
# 내구도가 0인 칸의 개수가 K개 이상이라면 과정을 종료한다. 그렇지 않다면 1번으로 돌아간다.
# 종료되었을 때 몇 번째 단계가 진행 중이었는지 구해보자. 가장 처음 수행되는 단계는 1번째 단계이다.

# [입력]
# 첫째 줄에 N, K가 주어진다. 둘째 줄에는 A1, A2, ..., A2N이 주어진다.

# [출력]
# 몇 번째 단계가 진행 중일때 종료되었는지 출력한다.

# [제한]
# 2 ≤ N ≤ 100
# 1 ≤ K ≤ 2N
# 1 ≤ Ai ≤ 1,000

# [문제 풀이]
# 내리는 위치가 N번이라면 N+1 ~ 2N은 왜 있는거지?
# 컨베이어벨트도 돌고, 상자도 추가로 1칸 이동할 수 있는 기회가 있는거네
# 컨베이어 벨트 내구도 deque, 상자 배치 deque 각각 만들기

# 싸이클
# 1. 벨트랑 상자 1회 이동
# 2. 상자가 N번째 인덱스에 존재할 경우 상자 제거
# 3. 상자는 본인 인덱스 + 1 지역에 상자가 없고, 내구도가 1 이상이면 추가로 이동
# 4. 이동한 지역 내구도 1 감소 + 내구도가 0이 되었다면 K - 1 해주기
# 5. 싸이클 횟수 1회 추가 + K가 0 미만이 되면 종료 및 총 싸이클 횟수 반환하고 종료

from collections import deque

# 1싸이클
def cycle():
    global cnt

    # 1. 컨테이어 이동
    belt_temp = belt.pop()
    box_temp = boxs.pop()

    belt.appendleft(belt_temp)
    boxs.appendleft(box_temp)

    # 2. 현재 N에 도달한 상자가 있으면 상자 제거
    if boxs[out]:
        boxs[out] = 0

    # 3. 이동할 수 있는 상자들 이동
    idx = N - 2
    while idx >= 0:
        if boxs[idx] and boxs[idx + 1] == 0 and belt[idx + 1]:
            boxs[idx], boxs[idx + 1] = boxs[idx + 1], boxs[idx]
            belt[idx + 1] -= 1
            if belt[idx + 1] == 0:
                cnt += 1
        idx -= 1

    # 4. 현재 N에 도달한 상자가 있으면 상자 제거
    if boxs[out]:
        boxs[out] = 0

    # 5. 현재 컨테이너의 0번째에 내구도가 있으면 boxs 첫번째에 상자 추가
    if not boxs[inp] and belt[inp]:
        boxs[inp] = 1
        belt[inp] -= 1
        # 내구도 0 됐으면 K 감소
        if belt[inp] == 0:
            cnt += 1
            
    # 6. 싸이클 카운트 추가
    return 1



N, K = map(int, input().split())

# 컨베이어 벨트
belt = deque(map(int, input().split()))
# 상자 위치
boxs = deque([0] * (2 * N))

# 시작점
inp = 0
# 배출점
out = N - 1

ans = 0

cnt = 0

while cnt < K:
    ans += cycle()

print(ans)

import sys;
input = sys.stdin.readline
# 치킨 배달

# 크기가 N×N인 도시가 있다.
# 도시는 1×1크기의 칸으로 나누어져 있다.
# 도시의 각 칸은 빈 칸, 치킨집, 집 중 하나이다.
# 도시의 칸은 (r, c)와 같은 형태로 나타내고, r행 c열 또는 위에서부터 r번째 칸, 왼쪽에서부터 c번째 칸을 의미한다.
# r과 c는 1부터 시작한다.

# 이 도시에 사는 사람들은 치킨을 매우 좋아한다.
# 따라서, 사람들은 "치킨 거리"라는 말을 주로 사용한다.
# 치킨 거리는 집과 가장 가까운 치킨집 사이의 거리이다.
# 즉, 치킨 거리는 집을 기준으로 정해지며, 각각의 집은 치킨 거리를 가지고 있다.
# 도시의 치킨 거리는 모든 집의 치킨 거리의 합이다.

# 임의의 두 칸 (r1, c1)과 (r2, c2) 사이의 거리는 |r1-r2| + |c1-c2|로 구한다.

# 예를 들어, 아래와 같은 지도를 갖는 도시를 살펴보자.

"""
0 2 0 1 0
1 0 1 0 0
0 0 0 0 0
0 0 0 1 1
0 0 0 1 2
"""

# 0은 빈 칸, 1은 집, 2는 치킨집이다.

# (2, 1)에 있는 집과 (1, 2)에 있는 치킨집과의 거리는 |2-1| + |1-2| = 2, (5, 5)에 있는 치킨집과의 거리는 |2-5| + |1-5| = 7이다.
# 따라서, (2, 1)에 있는 집의 치킨 거리는 2이다.

# (5, 4)에 있는 집과 (1, 2)에 있는 치킨집과의 거리는 |5-1| + |4-2| = 6, (5, 5)에 있는 치킨집과의 거리는 |5-5| + |4-5| = 1이다.
# 따라서, (5, 4)에 있는 집의 치킨 거리는 1이다.

# 이 도시에 있는 치킨집은 모두 같은 프랜차이즈이다. 프렌차이즈 본사에서는 수익을 증가시키기 위해 일부 치킨집을 폐업시키려고 한다.
# 오랜 연구 끝에 이 도시에서 가장 수익을 많이 낼 수 있는  치킨집의 개수는 최대 M개라는 사실을 알아내었다.

# 도시에 있는 치킨집 중에서 최대 M개를 고르고, 나머지 치킨집은 모두 폐업시켜야 한다.
# 어떻게 고르면, 도시의 치킨 거리가 가장 작게 될지 구하는 프로그램을 작성하시오.

# [입력]
# 첫째 줄에 N(2 ≤ N ≤ 50)과 M(1 ≤ M ≤ 13)이 주어진다.

# 둘째 줄부터 N개의 줄에는 도시의 정보가 주어진다.

# 도시의 정보는 0, 1, 2로 이루어져 있고, 0은 빈 칸, 1은 집, 2는 치킨집을 의미한다.
# 집의 개수는 2N개를 넘지 않으며, 적어도 1개는 존재한다.
# 치킨집의 개수는 M보다 크거나 같고, 13보다 작거나 같다.

# [출력]
# 첫째 줄에 폐업시키지 않을 치킨집을 최대 M개를 골랐을 때, 도시의 치킨 거리의 최솟값을 출력한다.

# [문제 풀이]
# N * N 의 도시에서 각각의 집에서 치킨 거리를 합한 값이 가장 짧으면서, 최대한 많은 치킨집을 폐업시키는 경우를 구해야 함
# N이 50이라 최대 2500 => dfs 불가능
# 우선 배열 순회해서 치킨집이랑 집 좌표 다 구해(따로따로)
# 집 별로 가까운 치킨집과 치킨거리 구해서 표시해주기
# 집이랑 가깝지 않은 치킨집들은 제거

# 이거 가만보니 백트레킹으로 풀 수 있겠는데?
# 치킨집 갯수가 최대 13개밖에 안됨
# 집도 최대 100개
# 치킨집을 뺀다, 놔둔다로 dfs 진행하면서, 치킨거리 한번씩 다 구해(최대 13 * 100 = 1300, 괜찮은듯?)
# M까지 도달했을 경우에 현재 치킨 거리가 최소면 업데이트 해주기

def backtracking(lev, m):
    global ans
    # 치킨집 갯수가 M만 남았을 경우
    if m == M:
        now_chicken_range = 0
        # 치킨 거리 계산
        for h in range(len(houses)):
            # 집 좌표
            hx, hy = houses[h]
            # 현재 집의 최소 치킨거리
            minimum_range = 100_000_000
            for c in range(len(chickens)):
                # 폐업시킨 치킨집이면 패쓰
                if visited[c] : continue
                # 치킨집 좌표
                cx, cy = chickens[c]
                # 현재 집 - 현재 치킨집 거리
                now_range = abs(hx - cx) + abs(hy - cy)
                # 최소 치킨거리라면 업데이트
                if minimum_range > now_range:
                    minimum_range = now_range
            # 현재 집의 최소 치킨거리 더해주기
            now_chicken_range += minimum_range
        # 가장 짧은 치킨 거리면 업데이트하고 종료
        if now_chicken_range < ans:
            ans = now_chicken_range
        return

    if lev == len(chickens):
        return

    backtracking(lev + 1, m)
    # 더 폐업시켜야하면
    if m > M:
        # 다음 지역 폐업
        visited[lev] = True
        backtracking(lev+1, m-1)
        visited[lev] = False


N, M = map(int, input().split())

map_arr = [list(map(int, input().split())) for _ in range(N)]

# 치킨집 좌표
chickens = []
# 집 좌표
houses = []

# 좌표 구하기
for y in range(N):
    for x in range(N):
        if map_arr[y][x] == 1:
            houses.append([x+1, y+1])
        elif map_arr[y][x] == 2:
            chickens.append([x+1, y+1])

ans = 100_000_000

# 치킨집 포함 여부
visited = [False] * (len(chickens) + 1)

# M 빼고 다 없앤다는 말이었네 아;
backtracking(0, len(chickens))



print(ans)
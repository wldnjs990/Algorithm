import sys;
input = sys.stdin.readline
# 회사 문화1

# 영선회사에는 매우 좋은 문화가 있는데,
# 바로 상사가 직속 부하를 칭찬하면 그 부하가 부하의 직속 부하를 연쇄적으로 칭찬하는 내리 칭찬이 있다.
# 즉, 상사가 한 직속 부하를 칭찬하면 그 부하의 모든 부하들이 칭찬을 받는다.

# 모든 칭찬에는 칭찬의 정도를 의미하는 수치가 있는데, 이 수치 또한 부하들에게 똑같이 칭찬 받는다.

# 직속 상사와 직속 부하관계에 대해 주어지고, 칭찬에 대한 정보가 주어질 때, 각자 얼마의 칭찬을 받았는지 출력하시오,

# [입력]
# 첫째 줄에는 회사의 직원 수 n명, 최초의 칭찬의 횟수 m이 주어진다.
# 직원은 1번부터 n번까지 번호가 매겨져 있다.
# (2 ≤ n, m ≤ 100,000)

# 둘째 줄에는 직원 n명의 직속 상사의 번호가 주어진다.
# 직속 상사의 번호는 자신의 번호보다 작으며, 최종적으로 1번이 사장이다.
# 1번의 경우, 상사가 없으므로 -1이 입력된다.

# 다음 m줄에는 직속 상사로부터 칭찬을 받은 직원 번호 i, 칭찬의 수치 w가 주어진다.
# (2 ≤ i ≤ n, 1 ≤ w ≤ 1,000)
# 사장은 상사가 없으므로 칭찬을 받지 않는다.

# [출력]
# 1번부터 n번의 직원까지 칭찬을 받은 정도를 출력하시오.

# [문제 풀이]
# 사장님 불쌍해
# 그림을 그려봐야할듯
# 칭찬을 받은 직원의 칭찬 정도를 배열 하나에 저장해둠
# 직속상사 번호 배열 일단 오름차순 정렬 한번 하고, 1번 순회 시작
# 순회하면서 해당 인덱스에 칭찬 받은 직원 정보가 있으면 칭찬 수를 누적시키면서 직원에게 부여해주기
# 이게 문제 설명이 너무 부족한데, 출력을 1 ~ N 까지를 순서대로 출력하는지, 아니면 직속 상사 번호 입력값 대로 출력하는데, 그 순서가 뒤죽박죽인지
# 그걸 모르겠네
# 3, 4의 직속 상사가 2인 경우엔 트리 형태로 만들어지긴 하겠네
# 직원 번호를 노드로 연결리스트 형태 트리를 만들어서 칭찬을 해당 노드로부터 리프노드로 갈 때 까지 더해주면 되려나

from collections import deque

# 직원 수 N, 최초 칭찬 횟수 M
N, M = map(int, input().split())
# 직속 상사 번호
parent = list(map(int, input().split()))

# 연결 리스트 만들기
link_list = [[] for _ in range(N+1)]
# 직속상사 번호대로 트리 만들기
for i in range(N):
    # 상사
    p = parent[i]
    # 사장이면 패쓰(-1)
    if p < 0 : continue
    # 후임
    c = i+1
    # 상사 -> 후임으로 이어지게 연결
    link_list[p].append(c)

# 칭찬 받은 직원 정보
ching_changs = [0] * N
for _ in range(M):
    worker, ching_chang = map(int, input().split())
    ching_changs[worker-1] += ching_chang

# 결과
ans = [0] * N

# dfs는 콜스택 초과할거 같아서 큐로 while문 돌리기
# 글구 생각해보니 후임들이 계층형태로 칭찬 내려받아야 하니깐 큐 방식이 맞는거 같네
deq = deque()
# 직원 순서대로 직속상사 받는거 같은데 그럼 1번째가 시작이지 않을까?
# 시작 직원, 누적 칭찬 담기
deq.append([parent[1], 0])

while deq:
  # 현재 직원, 누적 칭찬
  now, cnt = deq.popleft()
  # 현재 직원 칭찬 받았으면 누적 칭찬에 추가
  if ching_changs[now-1] > 0:
      cnt += ching_changs[now-1]
  # 현재 직원 칭찬 담기
  ans[now-1] = cnt
  # 현재 직원의 직속 부하로 이동
  for nt in link_list[now]:
      deq.append([nt, cnt])

print(*ans)